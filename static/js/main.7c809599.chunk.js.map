{"version":3,"sources":["Comp/Button.jsx","Comp/Input.jsx","App.js","serviceWorker.js","index.js"],"names":["isEqual","val","Button","props","react_default","a","createElement","style","children","backgroundColor","className","concat","onClick","handleClick","Input","input","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addNumber","setState","state","clicked","addOperator","handleClear","handleEqual","math","_this2","Input_Input","Button_Button","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c809599.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nconst isEqual = val => {\n    return (val === \"=\");\n}\n\nconst changeColor = val => {\n    if(val === \"=\") {\n        return {backgroundColor: \"cornflowerblue\"}\n    } else if(val === \"+\" || val === \"-\" || val === \"*\" || val === \"/\") {\n        return {backgroundColor: \"dimgrey\"}\n    }\n}\n\nexport const Button = props => (\n    <div style={changeColor(props.children)} className={`button ${isEqual(props.children) ? \"double\" : null}`} onClick={() => props.handleClick(props.children)}>\n        {props.children}\n    </div>\n);\n","import React from 'react';\nimport './Input.css';\n\nexport const Input = (props) => (\n    <div className=\"inputContainer\">\n        <div className=\"input\">{props.input}</div>\n    </div>\n);\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Button} from './Comp/Button';\nimport {Input} from './Comp/Input';\nimport * as math from 'mathjs';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            input: \"\",\n            clicked: false\n        }\n    }\n\n    addNumber = val => {\n        this.setState({input: this.state.input + val});\n        this.setState({ clicked: false });\n\n    }\n\n    addOperator = val => {\n        if(!this.state.clicked) {\n            this.setState({ input: this.state.input + val});\n            this.setState({ clicked: true});\n        }\n    }\n\n    handleClear = () => {\n        this.setState({ input: \"\"});\n    }\n\n    handleEqual = () => {\n        this.setState({input: math.round(math.eval(this.state.input), 4)});\n    }\n\n\n  render() {\n    return (\n        <div className=\"app\">\n            <div className=\"calc\">\n                <Input input={this.state.input}></Input>\n                <div className=\"row\">\n                    <Button handleClick={this.addNumber}>7</Button>\n                    <Button handleClick={this.addNumber}>8</Button>\n                    <Button handleClick={this.addNumber}>9</Button>\n                    <Button handleClick={this.addOperator}>/</Button>\n                </div>\n                <div className=\"row\">\n                    <Button handleClick={this.addNumber}>4</Button>\n                    <Button handleClick={this.addNumber}>5</Button>\n                    <Button handleClick={this.addNumber}>6</Button>\n                    <Button handleClick={this.addOperator}>*</Button>\n                </div>\n                <div className=\"row\">\n                    <Button handleClick={this.addNumber}>1</Button>\n                    <Button handleClick={this.addNumber}>2</Button>\n                    <Button handleClick={this.addNumber}>3</Button>\n                    <Button handleClick={this.addOperator}>+</Button>\n                </div>\n                <div className=\"row\">\n                    <Button handleClick={this.addOperator}>.</Button>\n                    <Button handleClick={this.addNumber}>0</Button>\n                    <Button handleClick={() => this.handleClear()}>AC</Button>\n                    <Button handleClick={this.addOperator}>-</Button>\n                </div>\n                <div className=\"row\">\n                    <Button handleClick={this.addNumber}>(</Button>\n                    <Button handleClick={this.addNumber}>)</Button>\n                    <Button handleClick={() => this.handleEqual()}>=</Button>\n                </div>\n            </div>\n          </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}